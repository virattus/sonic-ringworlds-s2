#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>

#include <GL/gl3w.h>


#include <stdio.h>
#include <stdbool.h>


SDL_Window* gWindow = NULL;
SDL_GLContext* gContext = NULL;

bool gRenderQuad = true;


GLuint gProgramID = 0;
GLint gVertexPos2DLocation = -1;
GLuint gVBO = 0;
GLuint gIBO = 0;


int printShaderLog(uint i)
{
}

int printProgramLog(uint i)
{
}


int Init()
{
	if(SDL_Init( SDL_INIT_VIDEO ) < 0)
	{
		printf("Failed to init SDL\n");
		return -1;
	}
	
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 1);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);
	
	gWindow = SDL_CreateWindow("test", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 640, 480, SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN);
	if(!gWindow)
	{
		printf("Failed to open window: %s\n", SDL_GetError());
		SDL_Quit();
		return -1;
	}
	
	gContext = SDL_GL_CreateContext(gWindow);
	if(gContext == NULL)
	{
		printf("SDL Could Not Create OpenGL Context: %s\n", SDL_GetError());
		SDL_Quit();
		return -1;
	}
	
	if(gl3wInit() > 0)
	{
		printf("Could not init gl3w\n");
		SDL_Quit();
		return -1;
	}
	
	return 0;
}


int initGL()
{
	gProgramID = glCreateProgram();
	
	GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
	
	const GLchar* vertexShaderSource[] = { 
		"#version 140\nin vec2 LVertexPos2D; void main() { gl_Position = vec4(LVertexPos2D.x, LVertexPos2D.y, 0, 1); }" 
	};
	
	glShaderSource(vertexShader, 1, vertexShaderSource, NULL);
	
	glCompileShader(vertexShader);
	
	GLint vShaderCompiled = GL_FALSE;
	glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &vShaderCompiled);
	if(vShaderCompiled != GL_TRUE)
	{
		printf("Failed to compile vertex shader\n");
		printShaderLog(vertexShader);
		return 0;
	}
	
	glAttachShader(gProgramID, vertexShader);
	
	GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	
	const GLchar* fragmentShaderSource[] = {
		"#version 140\nout vec4 LFragment; void main() { LFragment = vec4(1.0, 1.0, 1.0, 1.0); }"
	};
	
	glShaderSource(fragmentShader, 1, fragmentShaderSource, NULL);
	
	glCompileShader(fragmentShader);
	
	GLint fShaderCompiled = GL_FALSE;
	glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &fShaderCompiled);
	if(fShaderCompiled != GL_TRUE)
	{
		printf("Failed to compile fragment shader\n");
		printShaderLog(fragmentShader);
		return 0;
	}
	
	glAttachShader(gProgramID, fragmentShader);
	
	glLinkProgram(gProgramID);
	
	GLint programSuccess = GL_TRUE;
	glGetProgramiv(gProgramID, GL_LINK_STATUS, &programSuccess);
	if(programSuccess != GL_TRUE)
	{
		printf("Error linking program %d!\n", gProgramID);
		printProgramLog(gProgramID);
		return 0;
	}
	
	gVertexPos2DLocation = glGetAttribLocation(gProgramID, "LVertexPos2D");
	if(gVertexPos2DLocation == -1)
	{
		printf("variable not found in shader program\n");
		return 0;
	}
	
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	
	GLfloat vertexData[] = {
		-0.5f, -0.5f, 
		0.5f, -0.5f, 
		0.5f, 0.5f, 
		-0.5f, 0.5f
	};
	
	
	GLuint indexData[] = { 0, 1, 2, 3 };
	
	glGenBuffers(1, &gVBO);
	glBindBuffer(GL_ARRAY_BUFFER, gVBO);
	glBufferData(GL_ARRAY_BUFFER, 2 * 4 * sizeof(GLfloat), vertexData, GL_STATIC_DRAW);
	
	glGenBuffers(1, &gIBO);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, gIBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, 4 * sizeof(GLuint), indexData, GL_STATIC_DRAW);
	
	
	return 1;
}


int Close()
{
	SDL_DestroyWindow(gWindow);
	
	gWindow = NULL;
	
	IMG_Quit();
	SDL_Quit();
}


void render()
{
	glClear(GL_COLOR_BUFFER_BIT);
	
	glUseProgram(gProgramID);
	
	glEnableVertexAttribArray(gVertexPos2DLocation);
	
	glBindBuffer(GL_ARRAY_BUFFER, gVBO);
	glVertexAttribPointer(gVertexPos2DLocation, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(GLfloat), NULL);
	
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, gIBO);
	glDrawElements(GL_TRIANGLE_FAN, 4, GL_UNSIGNED_INT, NULL);
	
	glDisableVertexAttribArray(gVertexPos2DLocation);
	
	//glUseProgram(0);
	
}



int main()
{
	if(Init() < 0)
	{
		return -1;
	}
	
	initGL();

	SDL_StartTextInput();
	
	int quit = 0;
	while(!quit)
	{
		SDL_Event e;

		
		while(SDL_PollEvent(&e) != 0)
		{
			if(e.type == SDL_QUIT)
			{
				quit = 1;
			}
			if(e.type == SDL_WINDOWEVENT
				&& e.window.event == SDL_WINDOWEVENT_CLOSE)
			{
				quit = 1;
			}
			if(e.type == SDL_TEXTINPUT)
			{
				int x = 0, y = 0;
				SDL_GetMouseState( &x, &y );
				
			}
		}
		
		render();
		
		SDL_GL_SwapWindow(gWindow);
	}
	
	SDL_StopTextInput();
	
	Close();
	
	return 0;
}
